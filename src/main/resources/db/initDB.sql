DROP TABLE user_roles IF EXISTS;
DROP TABLE dishes IF EXISTS;
DROP TABLE votes IF EXISTS;
DROP TABLE users IF EXISTS;
DROP TABLE restaurants IF EXISTS;
/*DROP SEQUENCE global_seq IF EXISTS;*/

/*CREATE SEQUENCE GLOBAL_SEQ AS INTEGER START WITH 100000;*/

CREATE TABLE users
(
  id               INTEGER IDENTITY /*GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ*/ PRIMARY KEY,
  name             VARCHAR(255),
  email            VARCHAR(255)         NOT NULL,
  password         VARCHAR(255)         NOT NULL
);
CREATE UNIQUE INDEX users_unique_email_idx ON USERS (email);

CREATE TABLE user_roles
(
  user_id INTEGER NOT NULL,
  role    VARCHAR(255),
  CONSTRAINT user_roles_idx UNIQUE (user_id, role),
  FOREIGN KEY ( user_id ) REFERENCES USERS (id) ON DELETE CASCADE
);

CREATE TABLE restaurants
(
  id          INTEGER IDENTITY /*GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ*/ PRIMARY KEY,
  name        VARCHAR(255) NOT NULL
);

CREATE TABLE votes
(
  id      INTEGER IDENTITY /*GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ*/ PRIMARY KEY,
  user_id INTEGER NOT NULL,
  restaurant_id INTEGER NOT NULL,
  registered TIMESTAMP DEFAULT now(),
  FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
  FOREIGN KEY (restaurant_id) REFERENCES restaurants (id) ON DELETE CASCADE
);

CREATE TABLE dishes
(
  id            INTEGER IDENTITY /*GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ*/ PRIMARY KEY,
  name          VARCHAR(255) NOT NULL,
  price         DOUBLE,
  date_time     TIMESTAMP DEFAULT now(),
  restaurant_id INTEGER      NOT NULL,
  FOREIGN KEY (restaurant_id) REFERENCES restaurants (id) ON DELETE CASCADE
);
